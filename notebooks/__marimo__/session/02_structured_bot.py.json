{
  "version": "1",
  "metadata": {
    "marimo_version": "0.14.10"
  },
  "cells": [
    {
      "id": "Hbol",
      "code_hash": "b03ae3d1a8c7e35b57a5d71425064bb8",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "MJUe",
      "code_hash": "bbddc5665033e9b24c9d5dd041dda853",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h1 id=\"part-2-structured-outputs-with-structuredbot\">Part 2: Structured Outputs with StructuredBot</h1>\n<span class=\"paragraph\">In this notebook, we'll explore how to generate structured outputs from LLMs using LlamaBot's StructuredBot interface.\nWe'll learn how to create structured data models and use them to generate consistent, validated outputs.</span>\n<h2 id=\"learning-objectives\">Learning Objectives</h2>\n<span class=\"paragraph\">By the end of this notebook, you will be able to:</span>\n<ol>\n<li>Understand the difference between free-form and structured LLM outputs</li>\n<li>Create and use Pydantic models to define structured data schemas</li>\n<li>Implement StructuredBot for generating structured outputs</li>\n<li>Add custom formatting methods to enhance output presentation</li>\n<li>Handle complex nested data structures</li>\n<li>Compare different models and temperature settings for structured generation</li>\n</ol></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "vblA",
      "code_hash": "508a53a6142a069ecd2b0debb87b2bc7",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"introduction-to-structured-outputs\">Introduction to Structured Outputs</h2>\n<span class=\"paragraph\">In Part 1, we used SimpleBot to generate free-form text responses.\nWhile this works for many applications, sometimes we need more structured outputs\nthat conform to a specific schema or format.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "bkHC",
      "code_hash": "a003e2af2170fc20508d511cc3e69d17",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"why-structured-outputs\">Why Structured Outputs?</h3>\n<span class=\"paragraph\">Structured outputs are important because they enable us to control the structure by which an LLM generates its outputs, and to do so in a consistent format. With this, we are given the affordance of ease of integration with other systems, type safety, and better error handling than with free-form generation.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "lEQa",
      "code_hash": "cc4f069f5dde6f7b3ab6499a29ea85ed",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"when-would-you-use-structured-outputs\">When would you use Structured Outputs?</h3>\n<span class=\"paragraph\">Essentially when you're looking to fill out anything that could plausibly look like a \"form to fill\".\nAs we'll see later, we'll be modeling the \"form\" using Pydantic models,\nand the way that we give an LLM the form to fill is by passing the pydantic model into a <code>StructuredBot</code>.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "PKri",
      "code_hash": "f5537364c9fbfdb794189366196ce779",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"approaches-to-structured-generation\">Approaches to Structured Generation</h3>\n<span class=\"paragraph\">There are two main approaches to generating structured outputs from LLMs:</span>\n<ol>\n<li><strong>Prompting to get JSON</strong>: Ask the model to generate JSON directly. This is simple to implement, but may not always produce valid JSON, and will always require post-processing.</li>\n<li><strong>Logits masking</strong>: Used by the <a href=\"https://github.com/dottxt-ai/outlines\" rel=\"noopener\" target=\"_blank\">Outlines</a> package, one compiles a finite state machine to constrain the model's output tokens. This ensures valid structured data. While more complex to implement, Outlines has made things simpler, and it is more reliable for structured generation.</li>\n</ol>\n<span class=\"paragraph\">Within LlamaBot, because we rely on model providers (via LiteLLM) to handle structured generation, <code>StructuredBot</code> is thus agnostic to the method of structured generation.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "Xref",
      "code_hash": "75f8bc5618639ffe9593fdfde6521aa8",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stderr",
          "text": "2025-07-07 08:56:18.193 | DEBUG    | llamabot.recorder:store_prompt_version:334 - Storing prompt version for function: default_agentbot_system_prompt\n2025-07-07 08:56:18.193 | DEBUG    | llamabot.recorder:store_prompt_version:339 - Existing prompt found with hash: 8655a1d1f03e3bf76c79d9b4e1a34b0ec335508f9623b64ae6e2f8fc4d65e600\n"
        }
      ]
    },
    {
      "id": "SFPL",
      "code_hash": "1d766f0eb523b2708ae5d19dad6c4800",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"exercise-create-your-first-structuredbot\">Exercise: Create Your First StructuredBot</h3>\n<span class=\"paragraph\">Let's start by creating a simple structured bot that generates a person's information.\nWe'll define a Pydantic model to represent the structure we want, then create a StructuredBot\nthat will generate data conforming to this model.</span>\n<span class=\"paragraph\">Your task is to:</span>\n<ol>\n<li>Create a <code>Person</code> model with:<ul>\n<li><code>name</code>: The person's full name</li>\n<li><code>age</code>: Their age in years</li>\n<li><code>occupation</code>: Their current job or profession</li>\n</ul>\n</li>\n<li>Create a StructuredBot that uses this model to generate person profiles. Each field should have:<ul>\n<li>A type annotation (str, int, etc.)</li>\n<li>A description for the LLM</li>\n<li>Validation rules (if needed)</li>\n</ul>\n</li>\n</ol>\n<span class=\"paragraph\">The LlamaBot API for accomplishing this is as follows:</span>\n<div class=\"language-python codehilite\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">llamabot</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">lmb</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">pydantic</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n\n\n<span class=\"c1\"># In your code, change `ModelName`</span>\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">ModelName</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Change `field1/2`, `field_type`, and the description &quot;...&quot;</span>\n    <span class=\"n\">field1</span><span class=\"p\">:</span> <span class=\"n\">field_type</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">field2</span><span class=\"p\">:</span> <span class=\"n\">field_type</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;...&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">structured_bot</span> <span class=\"o\">=</span> <span class=\"n\">lmb</span><span class=\"o\">.</span><span class=\"n\">StructuredBot</span><span class=\"p\">(</span>\n    <span class=\"n\">system_prompt</span><span class=\"o\">=...</span><span class=\"p\">,</span>\n    <span class=\"n\">pydantic_model</span><span class=\"o\">=</span><span class=\"n\">ModelName</span><span class=\"p\">,</span> <span class=\"c1\"># put the pydantic class name here.</span>\n    <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;provider/model_name&quot;</span><span class=\"p\">,</span> <span class=\"c1\"># use ollama_chat/llama3.2 to start</span>\n<span class=\"p\">)</span>\n</code></pre></div></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "BYtC",
      "code_hash": "4e27f91d111c2898320c0de4b124c24c",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "wESY",
      "code_hash": "5ab84c50b75fd06dbe2c0ff8740e08e4",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "RGSE",
      "code_hash": "fe30f8afa81e816a61f5fc0881b4c547",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">Now, generate a new Person object using your <code>StructuredBot</code>.\nRemember that to call a LlamaBot, you simply call it like this:</span>\n<div class=\"language-python codehilite\"><pre><span></span><code><span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">ModelName</span> <span class=\"o\">=</span> <span class=\"n\">structured_bot</span><span class=\"p\">(</span><span class=\"s2\">&quot;your request here&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n<span class=\"paragraph\"><code>response</code> will be of the class <code>ModelName</code> that is passed into it.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "Kclp",
      "code_hash": "f1148e35d1d5be1aa7e7930779a42cfc",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<pre style='font-size: 12px'>Person(name=&#x27;Dr. Sofia Patel&#x27;, age=42, occupation=&#x27;Emergency Room Physician&#x27;)</pre>"
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "{ \""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "name\":"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " \"Dr"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": ". Sofia"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " Patel\","
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " \"age"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\": "
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "42,"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " \""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "occupation\":"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " \"Emergency"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " Room Physician"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\" }\n\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "    "
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\t"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\t\t         "
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\t"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\t"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " "
        }
      ]
    },
    {
      "id": "scCp",
      "code_hash": "64df7a9c2bfa9b914a64a9381f78e981",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<pre style='font-size: 12px'>&#x27;I am Dr. Sofia Patel, age 42, and my job is Emergency Room Physician&#x27;</pre>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "emfo",
      "code_hash": "a669cb237f403c48e6e7b0cb69f09405",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"filling-in-forms\">Filling in forms</h2>\n<span class=\"paragraph\">To hammer home the analogy that structured outputs are basically about filling in forms, I think it's useful to see the filling out of a form in action. Execution of the code above should automatically fill out the following Marimo UI elements, which I believe you can appreciate is just a form that needs to be filled out that can be used in downstream applications.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "Hstk",
      "code_hash": "7817ab2e9c8b7658a1154e4865e98962",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<div style='display: flex;flex: 1;flex-direction: column;justify-content: flex-start;align-items: normal;flex-wrap: nowrap;gap: 0.5rem'><marimo-ui-element object-id='Hstk-0' random-id='6bf43b6d-3f7e-e4be-f504-fe78739c5e32'><marimo-text data-initial-value='&quot;Dr. Sofia Patel&quot;' data-label='&quot;&lt;span class=&#92;&quot;markdown prose dark:prose-invert&#92;&quot;&gt;&lt;span class=&#92;&quot;paragraph&#92;&quot;&gt;Name&lt;/span&gt;&lt;/span&gt;&quot;' data-placeholder='&quot;&quot;' data-kind='&quot;text&quot;' data-full-width='false' data-disabled='false' data-debounce='true'></marimo-text></marimo-ui-element><marimo-ui-element object-id='Hstk-1' random-id='6cae168d-d81a-5d29-f505-da6c1daeda82'><marimo-slider data-initial-value='42' data-label='&quot;&lt;span class=&#92;&quot;markdown prose dark:prose-invert&#92;&quot;&gt;&lt;span class=&#92;&quot;paragraph&#92;&quot;&gt;Age&lt;/span&gt;&lt;/span&gt;&quot;' data-start='0' data-stop='120' data-step='1' data-steps='[]' data-debounce='false' data-disabled='false' data-orientation='&quot;horizontal&quot;' data-show-value='false' data-include-input='false' data-full-width='false'></marimo-slider></marimo-ui-element><marimo-ui-element object-id='Hstk-2' random-id='3b842e86-d4ca-9809-a8c8-9d5ea4096bce'><marimo-text data-initial-value='&quot;Emergency Room Physician&quot;' data-label='&quot;&lt;span class=&#92;&quot;markdown prose dark:prose-invert&#92;&quot;&gt;&lt;span class=&#92;&quot;paragraph&#92;&quot;&gt;Occupation&lt;/span&gt;&lt;/span&gt;&quot;' data-placeholder='&quot;&quot;' data-kind='&quot;text&quot;' data-full-width='false' data-disabled='false' data-debounce='true'></marimo-text></marimo-ui-element></div>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "nWHF",
      "code_hash": "aadafa1f67a1f00343242a8043393b09",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"extend-models\">Extend models</h3>\n<span class=\"paragraph\">Pydantic models are Python classes that define the structure of your data.\nUsing Pydantic, we can take advantage of automatic validation and type checking,\nand it is easy to de/serialize from/to JSON.</span>\n<span class=\"paragraph\">But on top of that, we can also provide custom methods (such as those used for rendering)!</span>\n<span class=\"paragraph\">Go ahead and modify the Person object with a class method defined\nthat returns a string representation of the object.\n(It can be <code>.str()</code> if you are a method chainer,\nor <code>__str__()</code> if you prefer to adhere to Python idioms.)\nThen, regenerate the object and try using its string display method.\nOr, if you're feeling fancy, refer to Marimo's <a href=\"https://docs.marimo.io/guides/integrating_with_marimo/displaying_objects/#option-2-implement-an-ipython-_repr__-method\" rel=\"noopener\" target=\"_blank\">documentation on rich displays</a>\nfor inspiration!</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "iLit",
      "code_hash": "1b2ea17d8c6629f771636363d182cb25",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "ZHCJ",
      "code_hash": "7d054c2eef9999c0fdb3e7ef80027984",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"nested-data-structures\">Nested Data Structures</h2>\n<span class=\"paragraph\">You can also get <code>StructuredBot</code> to generate nested data structures.\nWe are going to make this happen by creating a class list,\nwhich will be a collection of people.\nNested Pydantic objects can be written as follows:</span>\n<div class=\"language-python codehilite\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Individual</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Change &quot;something&quot;, &quot;type&quot;, and &quot;description goes here&quot;</span>\n    <span class=\"n\">something</span><span class=\"p\">:</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s2\">&quot;description goes here&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">GroupLevel</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Change &quot;group_iterable&quot;, &quot;Individual&quot;, and &quot;description goes here&quot;</span>\n    <span class=\"n\">group_iterable</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Individual</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s2\">&quot;description of group goes here.&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n<span class=\"paragraph\">The <code>GroupLevel</code> object can be passed to a <code>StructuredBot</code> to be generated:</span>\n<div class=\"language-python codehilite\"><pre><span></span><code><span class=\"n\">structured_bot</span> <span class=\"o\">=</span> <span class=\"n\">lmb</span><span class=\"o\">.</span><span class=\"n\">StructuredBot</span><span class=\"p\">(</span>\n    <span class=\"n\">system_prompt</span><span class=\"o\">=...</span><span class=\"p\">,</span>\n    <span class=\"n\">pydantic_model</span><span class=\"o\">=</span><span class=\"n\">GroupLevel</span><span class=\"p\">,</span> <span class=\"c1\"># put the pydantic class name here.</span>\n    <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;provider/model_name&quot;</span><span class=\"p\">,</span> <span class=\"c1\"># use ollama_chat/llama3.2 to start</span>\n<span class=\"p\">)</span>\n</code></pre></div></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "ROlb",
      "code_hash": "7ab675addffc050114ba8c3d80b8c026",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"exercise-generate-a-class-list-of-people\">Exercise: Generate a class list of people</h3>\n<span class=\"paragraph\">Using the prompt above, generate for me a classrom's worth of people.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "qnkX",
      "code_hash": "48076a525782846597324d31268493cb",
      "outputs": [
        {
          "type": "data",
          "data": {
            "application/json": "[\"text/plain:I am Dr. Emily Carter, age 34, and my job is Data Scientist\", \"text/plain:I am Rajesh Kumar, age 29, and my job is Machine Learning Engineer\", \"text/plain:I am Sofia Martinez, age 27, and my job is AI Researcher\", \"text/plain:I am Liam O'Connor, age 31, and my job is Software Developer\", \"text/plain:I am Chen Wei, age 36, and my job is Computational Scientist\", \"text/plain:I am Fatima Al-Mansouri, age 28, and my job is Bioinformatics Specialist\", \"text/plain:I am Lucas Johnson, age 33, and my job is Data Analyst\", \"text/plain:I am Ava Thompson, age 30, and my job is Research Scientist\", \"text/plain:I am Hiroshi Tanaka, age 40, and my job is Senior Data Engineer\", \"text/plain:I am Isabella Rossi, age 26, and my job is Junior AI Developer\"]"
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "{\"attendees\":[{\"name"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"Dr"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": ". Emily"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " Carter\",\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "age\":"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "34,\"occupation\":\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Data Scientist"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\"},{\"name"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"Raj"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "esh Kumar\",\"age"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":29,\"occupation\":\"Machine"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " Learning Engineer\"},{\"name"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"S"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "ofia Martinez\",\"age"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":27,\"occupation"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"AI Researcher\"},{\"name"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"Liam O'Connor"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\",\"age"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":31,\"occupation"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"Software"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " Developer\"},{\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "name\":\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Chen Wei"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\",\"age"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":36,\"occupation"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"Comput"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "ational Scientist"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\"},{\"name"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"Fatima Al"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "-Mans"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "ouri\",\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "age\":"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "28,\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "occupation\":\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Bioinformatics"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " Specialist\"},{\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "name\":\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Lucas Johnson\",\"age"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":33,\"occupation"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"Data"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " Analyst\"},{\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "name\":\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Ava"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " Thompson\",\"age\":"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "30,\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "occupation\":\""
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Research Scientist"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\"},{\"name"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"H"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "iroshi Tanaka"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\",\"age"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":40,\"occupation"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"Senior"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " Data Engineer"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\"},{\"name"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"Is"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "abella Rossi"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\",\"age"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":26,\"occupation"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\":\"Junior"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": " AI Developer\"}]}"
        }
      ]
    },
    {
      "id": "TqIu",
      "code_hash": "de984ccd8ac90325b50747391be27087",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"check-out-notebook-09\">Check out notebook 09</h2>\n<span class=\"paragraph\">This notebook shows an example of how to use GPT-4o (you will need an OpenAI API key) for structured generation from images. It's super cool!</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "Vxnm",
      "code_hash": "8c25455d05a03fbfb30e6402f28ef92a",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"conclusions\">Conclusions</h2></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "DnEU",
      "code_hash": "e0d839c67852ef65d0afa854ff21b19b",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"core-concepts\">Core Concepts</h3>\n<span class=\"paragraph\">Structured generation represents\na powerful paradigm shift in how we interact with LLMs.\nBy using Pydantic models to define our data schemas,\nwe gain the ability to generate consistent, validated outputs\nthat can be seamlessly integrated into your applications.\nThis approach not only ensures type safety\nbut also provides a clear contract between your code\nand the LLM's output.</span>\n<span class=\"paragraph\">I built StructuredBot as an interface to this structured world.\nThrough it, you can control the generation process, fine-tune the temperature,\nand select the most appropriate model for your needs.\nThe ability to customize output formats adds another layer of flexibility,\nallowing you to present the generated data in ways\nthat best serve your specific use cases.</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "ulZA",
      "code_hash": "c075dbe317d0ea61a6ac21075b85af7d",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"best-practices\">Best Practices</h3>\n<span class=\"paragraph\">When designing models for structured generation, it's crucial to be specific.\nEach model should serve a specific purpose.\nFor most applications that I have seen, the more precise your object definition, the better.</span>\n<span class=\"paragraph\"><strong>Important Tip</strong>: Avoid nesting your Pydantic models as much as possible!\nWhile nested structures can be useful, they often make it harder for LLMs to generate\nconsistent outputs and can lead to more complex validation errors.\nFlatter structures tend to work better with structured generation.\n(<a href=\"https://www.linkedin.com/posts/drgabrielharris_struggling-to-get-consistent-structured-llm-activity-7344306907467186176-Bz78\" rel=\"noopener\" target=\"_blank\">Source: Gabriel Harris on LinkedIn</a>)</span>\n<span class=\"paragraph\">Be sure to leverage pydantic model validators to catch errors in LLM output!\nFor example, if you want an LLM to generate a prior probability value\nthat corresponds to the likelihood of an event happening,\nyou have two choices:</span>\n<ol>\n<li>Ask it to generate a float constrained to be between 0 and 1, or</li>\n<li>Ask it to generate the log odds (unbounded) and then inverse logit transform that value, thus obviating the need for constraint checks.</li>\n</ol>\n<span class=\"paragraph\">I would lean towards using the latter, as it is easier to guarantee correctness through the logit transform, but the former is not wrong, we just can't guarantee one-shot mathematical correctness, as the LLM may still have a chance of proposing a value out of bounds, thus necessitating a second shot.</span>\n<span class=\"paragraph\">One big tip is to heavily lean on the <code>Field</code> class to describe the data you want! The description is fed as context to the LLM. Any natural language provided will steer the LLM in a particular way.</span>\n<span class=\"paragraph\">And don't forget to do Evals! That is a topic for the Evals notebook to cover \ud83e\udd17.</span></span>"
          }
        }
      ],
      "console": []
    }
  ]
}
